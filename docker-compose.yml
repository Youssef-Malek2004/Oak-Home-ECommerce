volumes:
  zksingle-ksingle_broker-data:
  zksingle-ksingle_broker-secrets:
  zksingle-ksingle_zookeeper-data:
  zksingle-ksingle_zookeeper-log:
  zksingle-ksingle_zookeeper-secrets:
  pgbouncer-config:
  pgbouncer-data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - type: volume
        source: zksingle-ksingle_zookeeper-data
        target: /var/lib/zookeeper/data
      - type: volume
        source: zksingle-ksingle_zookeeper-log
        target: /var/lib/zookeeper/log
      - type: volume
        source: zksingle-ksingle_zookeeper-secrets
        target: /etc/zookeeper/secrets
    networks:
      - proxyBackend

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - type: volume
        source: zksingle-ksingle_broker-data
        target: /var/lib/kafka/data
      - type: volume
        source: zksingle-ksingle_broker-secrets
        target: /etc/kafka/secrets
    networks:
      - proxyBackend
        
  gateway.api:
    image: gateway.api
    ports:
      - "5010:5010"
      - "5011:5011"
    environment:
      - ASPNETCORE_URLS=http://+:5010
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    build:
      context: .
      dockerfile: Gateway/Gateway.Api/Dockerfile
    networks:
      - proxyBackend
      
  users.database:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d users" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: users.database
    environment:
      - POSTGRES_DB=users
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./.containers/users-db-3:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - proxyBackend
      
  users.api:
    image: users.api
    build:
      context: .
      dockerfile: Services/Users/Users.Api/Dockerfile
    ports:
      - "5100:5100"
      - "5101:5101"
    environment:
      - ASPNETCORE_URLS=http://+:5100
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    depends_on:
      users.database:
        condition: service_healthy
        restart: true
    networks:
      - proxyBackend
  
  products.api:
    image: products.api
    build:
      context: .
      dockerfile: Services/Products/Products.Api/Dockerfile
    ports:
      - "5200:5200"
      - "5201:5201"
    environment:
      - ASPNETCORE_URLS=http://+:5200
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    depends_on:
      products.database:
        condition: service_healthy
    restart: always
    networks:
      - proxyBackend
      
  products.database:
    image: mongo:latest
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: products.database
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    volumes:
      - ./.containers/mongo-db:/data/db
    networks:
      - proxyBackend
  
  inventory.api:
    image: inventory.api
    build:
      context: .
      dockerfile: Services/Inventory/Inventory.Api/Dockerfile
    ports:
      - "5300:5300"
      - "5301:5301"
    env_file:
      - EnvironmentFiles/.env.inventory.api
    depends_on:
      inventory.database:
        condition: service_healthy
        restart: true
    networks:
      - proxyBackend

  inventory.database:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d app.inventory" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: inventory.database
    environment:
      - POSTGRES_DB=app.inventory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./.containers/inventory-db-3:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - proxyBackend
      
  orders.api:
    image: orders.api
    build:
      context: .
      dockerfile: Services/Orders/Orders.Api/Dockerfile
    ports:
      - "5400:5400"
      - "5401:5401"
    environment:
      - ASPNETCORE_URLS=http://+:5400
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    restart: always
    networks:
      - proxyBackend
        
  notifications.api:
    image: notifications.api
    build:
      context: .
      dockerfile: Services/Notifications/Notifications.Api/Dockerfile
    ports:
      - "5500:5500"
      - "5501:5501"
    environment:
      - ASPNETCORE_URLS=http://+:5500
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - proxyBackend
        
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - ./.containers/redis:/data
    networks:
      - proxyBackend
  
  inventory.pgbouncer:
    image: edoburu/pgbouncer
    container_name: inventory.pgbouncer
    ports:
      - "6432:6432"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@inventory.database:5432/inventory
      - AUTH_TYPE=md5
    volumes:
      - pgbouncer-config:/etc/pgbouncer
      - pgbouncer-data:/var/lib/pgbouncer
      - ./Services/pgbouncer-config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./Services/pgbouncer-config/userlist.txt:/etc/pgbouncer/userlist.txt
    depends_on:
      inventory.database:
        condition: service_healthy
        restart: true
    networks:
      - proxyBackend
  
  payments.api:
    image: payments.api
    build:
      context: .
      dockerfile: Services/Payments/Payments.Api/Dockerfile
    ports:
      - "5600:5600"
      - "5601:5601"
    environment:
      - ASPNETCORE_URLS=http://+:5600
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__kafka=PLAINTEXT://kafka:9092
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - proxyBackend
    
  cart.api:
    image: cart.api
    build:
      context: .
      dockerfile: Services/Cart/Cart.Api/Dockerfile
    ports:
      - "5700:5700"
      - "5701:5701"
    env_file:
      - EnvironmentFiles/.env.cart.api
    depends_on:
      cart.database:
        condition: service_healthy
        restart: true
    networks:
      - proxyBackend
  
  cart.database:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d app.cart" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: cart.database
    environment:
      - POSTGRES_DB=app.cart
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./.containers/cart-db-3:/var/lib/postgresql/data
    ports:
      - 5434:5432
    networks:
      - proxyBackend
  
networks:
  proxyBackend:
    name : proxyBackend
    driver: bridge

